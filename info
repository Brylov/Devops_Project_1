DAY 1:

backend - python - RESTAPI:
    pip install requirement.txt
    python app.py

frontend: --- # not in use anymore cus in Day 2 moved to angular
    npm init -y
    npm install tailwindcss postcss-cli autoprefixer flowbite
    npx tailwindcss -i ./static/src/input.css -o ./static/dist/css/output.css --watch

docker:
    docker error with socket even when givin the right group and share the socket correctly
    "ERROR: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:"
    problem is that the groups in the host and the jenkins is the same name but no the same id 
    so need to change the grpid in the jenkins container to the same as in the host
    fixing steps:
        * checked with `getent group docker` the host docker gid
        * added the following cmd the the jenkins docker file `RUN groupmod -g <gid> docker` before `RUN usermod -a -G docker jenkins`

app:
    adding mongodb to add save word function, 
    - added .env with the mongo creds (.gitignore config)
    - requiremenets.txt updated

jenkins:
    Plugins:
        Docker pipline
        aws ECR
        
EOD(End of Day):
    github:
        made a faulty commit with senstive data (creds of mongo) and pushed it to github,
        fixed it by this steps:
            adding the file/folder to .gitignore
            ```
            git add .gitignore
            git commit -m "Add sensitive file to .gitignore 
            git rm --cached path/to/sensitive/file #to untrack the sensetive file/folder
            git commit -m "Remove sensitive file from tracking"
            git push origin dev
            git log # check what commit i need to delete
            git rebase -i HEAD~N  #(Replace N with the number of commits to go back i.e if its the third commit so HEAD~3)
            # deleting the commit line from the file and save
            git rebase --continue
            git push origin dev --force
            ```

DAY 2:

app:
    decided to move from flask app as back and front to flask app restapi as backend and angular 18 as frontend .
    for the good pracitce it looks like a good idea, in the "real world" it gives more space and dynamic to develope for more teams to work sepertly
    and not everything is sitting on the flask, more scalability and ease to upgrade and update things. 


angular:
    decided for the challenge to use angular like the new approch that the creators are reccomend to use so I started to use as standalone components on angular.
    quite challenging to not use ngModule but I figured it out, for the long run it seems like its easier to maintain.

DAY 3:

backend:   
    added more apis and modified the exists, naming variables more realistic. added full pytest file for testing all the apis + connection with mongo.
    save words to mongo now more dynamic and can stash any language text.

frontend:
    made a lot of changes, refactor names, functinality to all apis. added copy function and input text tts, delete saved words,
    select multi languages for input and output,
    production build availbale for next stage --> devops ci/cd jenkins + argocd, minikube;
    production running on nginx! for more security, faster runtime, light weight images.

nginx:
    serving the frontend via port 80 (atm), nginx.conf created and modified.

docker:
    docker compose now have 3 services, frontend, backend, mongo.
    while tring to setup multistage dockerfile for the frontend i had some issues:
    * collision between pulled image of node to the angular that the app is running --> fixed by update to later image of node (from 14-alpine to 22-alpine),
    *  ng build --prod is not supported since angular 12 , had to use ng build --configuration production.
    * after building the front image i got the default html of nginx instead the app,
      apperently the build arcitecture i diffrent from what i used to use
      so I had to make some modifications on angular.json, the ng build -- built the app into browser folder,
      had to change the build architecture from Application --> Browser, and the "browser":"src/main.ts" to "main":"src/main.ts",
      after this change the build finished successfully with the dist folder i know how to work with.

jenkins:
    adding the deploy image to ECR, on non portfolio purpuses, i have to run the jenkins of EC2 and give IAM role to the machine to connect to ECR,
    but on PORTFOLIO -- ill connect with my aws account to the awscli of the jenkins machine instead, the jenkins is running locally (badget considorations)

